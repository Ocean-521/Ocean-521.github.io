<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【TypeScript】学习笔记（二）TypeSript的安装</title>
      <link href="/2022/12/11/%E3%80%90TypeScript%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89TypeSript%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/12/11/%E3%80%90TypeScript%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89TypeSript%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="👉安装">👉安装</h3><h4 id="1-执行安装命令"><strong>1、执行安装命令</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h4 id="2-检测安装是否成功"><strong>2、检测安装是否成功</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p><img src="https://ocean-resources.oss-cn-shenzhen.aliyuncs.com/blog/TypeScript/1.png" alt=""></p><h3 id="👉项目中使用">👉项目中使用</h3><h4 id="1-创建-tsconfig-json-配置文件"><strong>1、创建 <code>tsconfig.json</code> 配置文件</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p><img src="https://ocean-resources.oss-cn-shenzhen.aliyuncs.com/blog/TypeScript/2.png" alt=""></p><h4 id="2-tsconfig-json"><strong>2、</strong><code>tsconfig.json</code></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**************基础配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 开启增量编译：TS 编译器在第一次编译的时候，会生成一个存储编译信息的文件，下一次编译的时候，会根据这个文件进行增量的编译，以此提高TS的编译速度 */</span></span><br><span class="line">        <span class="comment">// &quot;incremental&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 指定存储增量编译信息的文件位置 */</span></span><br><span class="line">        <span class="comment">// &quot;tsBuildInfoFile&quot;: &quot;./&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 打印诊断信息 */</span></span><br><span class="line">        <span class="comment">// &quot;diagnostics&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 打印输出的文件 */</span></span><br><span class="line">        <span class="comment">// &quot;listEmittedFiles&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 打印编译的文件（包括引用的声明文件）*/</span></span><br><span class="line">        <span class="comment">// &quot;listFiles&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 指定 ECMAScript 的目标版本: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, &#x27;ES2018&#x27;, &#x27;ES2019&#x27; or &#x27;ESNEXT&#x27;. */</span></span><br><span class="line">        <span class="comment">// &quot;target&quot;: &quot;es5&quot;,</span></span><br><span class="line">        <span class="comment">/* 指定模块代码的生成方式: &#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es2015&#x27;, or &#x27;ESNext&#x27;. */</span></span><br><span class="line">        <span class="comment">// &quot;module&quot;: &quot;commonjs&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 指定要包含在编译中的库文件——引用类库——即申明文件，如果输出的模块方式是 es5，就会默认引入 &quot;dom&quot;,&quot;es5&quot;,&quot;scripthost&quot;  */</span></span><br><span class="line">        <span class="comment">/* 如果在 TS 中想要使用一些 ES6 以上版本的语法，就需要引入相关的类库 */</span></span><br><span class="line">        <span class="comment">// &quot;lib&quot;: [],</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 允许编译 JS 文件 */</span></span><br><span class="line">        <span class="comment">// &quot;allowJs&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 检查 JS 文件*/</span></span><br><span class="line">        <span class="comment">// &quot;checkJs&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 指定 JSX 代码生成的模式: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;. */</span></span><br><span class="line">        <span class="comment">/* &#x27;react&#x27; 模式下：TS 会直接把 jsx 编译成 js */</span></span><br><span class="line">        <span class="comment">/* &#x27;preserve&#x27; 模式下：TS 不会把 jsx 编译成 js，会保留 jsx */</span></span><br><span class="line">        <span class="comment">// &quot;jsx&quot;: &quot;preserve&quot;,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**************声明文件相关配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成相应的类型声明文件 —— &#x27;.d.ts&#x27; */</span></span><br><span class="line">        <span class="comment">// &quot;declaration&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 声明文件的输出路径 */</span></span><br><span class="line">        <span class="comment">// &quot;declarationDir&quot;: &quot;./d&quot;,</span></span><br><span class="line">        <span class="comment">/* 只生成声明文件，不生成 JS */</span></span><br><span class="line">        <span class="comment">// &quot;emitDeclarationOnly&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 声明文件目录，默认 node_modules/@types */</span></span><br><span class="line">        <span class="comment">// &quot;typeRoots&quot;: [],</span></span><br><span class="line">        <span class="comment">/* 要导入的声明文件包，默认导入上面声明文件目录下的所有声明文件 */</span></span><br><span class="line">        <span class="comment">// &quot;types&quot;: [],</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将多个相互依赖的文件合并并且把编译后的内容输出到一个文件里</span></span><br><span class="line"><span class="comment">         * 可以用在产出 AMD 模块的场景中</span></span><br><span class="line"><span class="comment">         * &quot;module&quot;:&quot;amd&quot; 时，当一个模块引入了另外一个模块，编译的时候会把这两个模块的编译结果合并到一个文件中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// &quot;outFile&quot;: &quot;./&quot;,</span></span><br><span class="line">        <span class="comment">/* 指定编译文件的输出目录 */</span></span><br><span class="line">        <span class="comment">// &quot;outDir&quot;: &quot;./out&quot;,</span></span><br><span class="line">        <span class="comment">/* 指定输入文件的根目录，用于控制输出目录的结构 */</span></span><br><span class="line">        <span class="comment">// &quot;rootDir&quot;: &quot;./&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 启用项目编译 */</span></span><br><span class="line">        <span class="comment">// &quot;composite&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*  输出的时候移除注释 */</span></span><br><span class="line">        <span class="comment">// &quot;removeComments&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不输出文件 */</span></span><br><span class="line">        <span class="comment">// &quot;noEmit&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 发生错误时不输出文件 */</span></span><br><span class="line">        <span class="comment">// &quot;noEmitOnError&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不生成 helper 函数，以前的话设置为 true 后，需要额外安装 ts-helpers */</span></span><br><span class="line">        <span class="comment">/* 类似于 babel ，会给每个文件都生成 helper 函数，会使得最终编译后的包的体积变大 */</span></span><br><span class="line">        <span class="comment">// &quot;noEmitHelpers&quot;: true,</span></span><br><span class="line">        <span class="comment">/* 现在可以通过 tslib（TS 内置的库）引入 helper 函数，！！！文件必须是模块 ！！！ */</span></span><br><span class="line">        <span class="comment">/* 编译后自动引入 var tslib_1 = require(&quot;tslib&quot;) */</span></span><br><span class="line">        <span class="comment">// &quot;importHelpers&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当目标是 ES5 或 ES3 的时候提供对 for-of、扩展运算符和解构赋值中对于迭代器的完整支持 */</span></span><br><span class="line">        <span class="comment">// &quot;downlevelIteration&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把每一个文件转译成一个单独的模块 */</span></span><br><span class="line">        <span class="comment">// &quot;isolatedModules&quot;: true,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**************严格检查配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 开启所有的严格检查配置 */</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">/* 不允许使用隐式的 any 类型 */</span></span><br><span class="line">        <span class="comment">// &quot;noImplicitAny&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不允许把 null、undefined 赋值给其他类型变量 */</span></span><br><span class="line">        <span class="comment">// &quot;strictNullChecks&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不允许函数参数双向协变 */</span></span><br><span class="line">        <span class="comment">// &quot;strictFunctionTypes&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 使用 bind/call/apply 时，严格检查函数参数类型 */</span></span><br><span class="line">        <span class="comment">// &quot;strictBindCallApply&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 类的实例属性必须初始化 */</span></span><br><span class="line">        <span class="comment">// &quot;strictPropertyInitialization&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不允许 this 有隐式的 any 类型，即 this 必须有明确的指向*/</span></span><br><span class="line">        <span class="comment">// &quot;noImplicitThis&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 在严格模式下解析并且向每个源文件中注入 &quot;use strict&quot; */</span></span><br><span class="line">        <span class="comment">// &quot;alwaysStrict&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**************额外的语法检查配置，这种检查交给 eslint 就行，没必要配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 有未使用到的本地变量时报错 */</span></span><br><span class="line">        <span class="comment">// &quot;noUnusedLocals&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 有未使用到的函数参数时报错 */</span></span><br><span class="line">        <span class="comment">// &quot;noUnusedParameters&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 每个分支都要有返回值 */</span></span><br><span class="line">        <span class="comment">// &quot;noImplicitReturns&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 严格校验 switch-case 语法 */</span></span><br><span class="line">        <span class="comment">// &quot;noFallthroughCasesInSwitch&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**************模块解析配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 指定模块的解析策略: &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6)*/</span></span><br><span class="line">        <span class="comment">/* 若未指定，那么在使用了 --module AMD | System | ES2015 时的默认值为 Classic，其它情况时则为 Node */</span></span><br><span class="line">        <span class="comment">// &quot;moduleResolution&quot;: &quot;node&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 在解析非绝对路径模块名的时候的基准路径 */</span></span><br><span class="line">        <span class="comment">// &quot;baseUrl&quot;: &quot;./&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 基于 &#x27;baseUrl&#x27; 的路径映射集合 */</span></span><br><span class="line">        <span class="comment">// &quot;paths&quot;: &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将多个目录放在一个虚拟目录下，用于运行时 */</span></span><br><span class="line">        <span class="comment">/* 当自己编写的库和开发的代码都输出到一个目录下时，开发代码和库的位置不一样，开发代码引入库的路径就会不对 */</span></span><br><span class="line">        <span class="comment">// &quot;rootDirs&quot;: [],</span></span><br><span class="line">        <span class="comment">// &quot;rootDirs&quot;: [&quot;src&quot;,&quot;out&quot;],</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 允许 export = xxx 导出 ，并使用 import xxx form &quot;module-name&quot; 导入*/</span></span><br><span class="line">        <span class="comment">// &quot;esModuleInterop&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当模块没有默认导出的时候，允许被别的模块默认导入，这个在代码执行的时候没有作用，只是在类型检查的时候生效 */</span></span><br><span class="line">        <span class="comment">// &quot;allowSyntheticDefaultImports&quot;: true,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 不要 symlinks 解析的真正路径 */</span></span><br><span class="line">        <span class="comment">// &quot;preserveSymlinks&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 允许在模块中以全局变量的方式访问 UMD 模块内容 */</span></span><br><span class="line">        <span class="comment">// &quot;allowUmdGlobalAccess&quot;: true,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************** Source Map 配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 指定 ts 文件位置 */</span></span><br><span class="line">        <span class="comment">// &quot;sourceRoot&quot;: &quot;&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 指定 map 文件存放的位置 */</span></span><br><span class="line">        <span class="comment">// &quot;mapRoot&quot;: &quot;&quot;,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成目标文件的 sourceMap */</span></span><br><span class="line">        <span class="comment">// &quot;sourceMap&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将代码与sourcemaps生成到一个文件中，要求同时设置了--inlineSourceMap 或--sourceMap 属性*/</span></span><br><span class="line">        <span class="comment">// &quot;inlineSources&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成目标文件的 inline sourceMap —— 源文件和 sourcemap 文件在同一文件中，而不是把 map 文件放在一个单独的文件里*/</span></span><br><span class="line">        <span class="comment">// &quot;inlineSourceMap&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成声明文件的 sourceMap */</span></span><br><span class="line">        <span class="comment">// &quot;declarationMap&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************** 实验性的配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 启用装饰器 */</span></span><br><span class="line">        <span class="comment">// &quot;experimentalDecorators&quot;: true,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &quot;emitDecoratorMetadata&quot;: true,    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**************高级配置**************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 强制区分大小写 */</span></span><br><span class="line">        <span class="comment">// &quot;forceConsistentCasingInFileNames&quot;: true</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指定需要编译的单个文件列表 */</span></span><br><span class="line">    <span class="comment">// &quot;files&quot;: [],</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 指定需要编译的文件/目录 */</span></span><br><span class="line">    <span class="comment">// &quot;include&quot;: [</span></span><br><span class="line">    <span class="comment">//    // 只写一个目录名等价于 &quot;./src/**/*&quot;</span></span><br><span class="line">    <span class="comment">//    &quot;src&quot;</span></span><br><span class="line">    <span class="comment">//  ]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 需要排除的文件或目录 */</span></span><br><span class="line">    <span class="comment">// &quot;exclude&quot;: []</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 配置文件继承 */</span></span><br><span class="line">    <span class="comment">// &quot;extends&quot;: &quot;./tsconfig.base.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-监视-tsconfig-json"><strong>3、监视 <code>tsconfig.json</code></strong></h4><ul><li><p>vscode -&gt; 终端 -&gt; 运行任务 -&gt; typescript -&gt; tsc: 构建 tsconfig.json</p><p><img src="https://ocean-resources.oss-cn-shenzhen.aliyuncs.com/blog/TypeScript/3.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TypeScript】学习笔记（一）TypeSript VS JavaScript</title>
      <link href="/2022/11/30/%E3%80%90TypeScript%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89TypeSript%20VS%20JavaScript/"/>
      <url>/2022/11/30/%E3%80%90TypeScript%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89TypeSript%20VS%20JavaScript/</url>
      
        <content type="html"><![CDATA[<h3 id="👉关于它们">👉关于它们</h3><p><strong>JavaSript</strong></p><ul><li>JavaScript 是具有函数优先的、轻量级的、解释型（即时编译型）的一种编程语言</li><li>JavaScript 基于原型编程，是多范式的动态脚本语言，支持面向对象、命令式和声明式（如函数编程）风格。并且它遵循ECMAScript标准<ul><li>ECMAScript：描述了JavaScript语言的语法和基本对象</li><li>文档对象模型（DOM）：描述处理网页内容的方法和接口</li><li>浏览器对象模型（BOM）：描述与浏览器进行交互的方法和接口</li></ul></li><li>javaScript 特点<ul><li>JavaScript 是一种脚本编写语言，无需编译，只要嵌入 HTML 代码中，就能由浏览器逐行加载解释执行</li><li>JavaScript 是一种基于对象的语言，可以创建对象同时使用现有对象。但是 Javascript 并不支持其它面向对象语言所具有的继承和重载功能</li><li>JavaScript 的语法简单，使用的变量为弱类型</li><li>JavaScript 语言较为安全，仅在浏览器端执行，不会访问本地硬盘数据</li><li>JavaScript 语言具有动态性。JavaScript 是事件驱动的，只根据用户的操作做出相应的反应处理</li><li>JavaScript 只依赖于浏览器，与操作系统的因素无关。因此 JavaScript 是一种跨平台的语言</li><li>JavaScript 兼容性较好，能够与其他技术（如 XML，REST API 等）一起使用</li></ul></li></ul><p><strong>TypeScript</strong></p><ul><li>TypeScript 是 Microsoft 开发和维护的一种开源的面向对象的编程语言，通过在JavaScript的基础上添加静态类型定义构建而成。它是 JavaScript 的超集，可以被编译成 Javascript；它包含了 JavaScript 的所有元素，并扩展了 JavaScript 的语法；它还可以载入 JavaScript 代码运行（用 Javascript 编写的合法代码，在Typescript 中依然有效）。</li><li>语法上，TypeScript 很类似于 JScript .NET，另外一个添加了对静态类型，经典的面向对象语言特性如类，继承，接口、枚举、泛型和命名空间等的支持的 Microsoft 对 ECMAScript 语言标准的实现</li></ul><h3 id="👉两者区别">👉两者区别</h3><p><strong>JavaScript</strong></p><ul><li>动态类型，运行时明确变量的类型，变量的类型由变量的值决定，并跟随值的改变而改变</li><li>直接运行在浏览器和node.js环境中</li><li>弱类型，数据类型可以被忽略的语言。一个变量可以赋不同数据类型的值</li></ul><p><strong>TypeScript</strong></p><ul><li>静态类型，声明时确定类型，之后不允许修改</li><li>编译运行，始终先编译成JavaScript再运行</li><li>强类型，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了</li></ul><h3 id="👉typescript的优点">👉<strong>TypeScript的优点</strong></h3><ul><li>开源，跨平台。它本身不需要考虑运行环境的问题，所有支持JavaScript的地方都可以使用typescript</li><li>引入静态类型声明，减少不必要的类型判断和文档注释</li><li>及早发现错误，静态类型检查或编译时发现问题，不用等到运行</li><li>类、接口的使用更易于构建和维护组件</li><li>编辑器内智能提示，对于一些用ts开发或者有types.d.ts类型包的第三方库有良好代码提示</li><li>重构更方便可靠, 强大的接口类型可以充当使用文档</li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【随笔】写在11月的尾巴</title>
      <link href="/2022/11/27/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%86%99%E5%9C%A811%E6%9C%88%E7%9A%84%E5%B0%BE%E5%B7%B4/"/>
      <url>/2022/11/27/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91%E5%86%99%E5%9C%A811%E6%9C%88%E7%9A%84%E5%B0%BE%E5%B7%B4/</url>
      
        <content type="html"><![CDATA[<p>11月，北方的天气似乎已是风雪飘飘，穿着大棉袄的景象。而在深圳这个南方城市中，大家却依旧在抵御炎热的气候，短袖出行，同是一个秋，差距却是挺大的。这个月，对于自己而言，时间过的似乎很快，但是经历的事情却是感觉有不少。</p><h3 id="👉工作上">👉工作上</h3><p>自从搬到了离公司近的租房之后，上班通勤时间缩短到了20分钟以内，早上起床倒是没有了以往的匆忙，但是还是经常踩点迟到，噗，得好好反思一下哈哈哈。</p><p>工作上还算顺利，遇到的难题也有，主要是没接触过(大部分只能怪自己太懒了，没有去广泛学习嘿嘿)，遇到不会的小难题，那就想办法去解决它，然后在这个过程中成长积累经验。</p><p>工作量呢也和以往差不多，偶尔加加班，赶一赶，倒还是可以按时完成项目，属实算是有惊无险，但是还是可以明显感觉到自己在一些知识点方面的不足和缺陷。</p><p>当然，我们不可能一下子就变得优秀，不可能一下子就减掉肥肉，也不可能一下子就培养一个好习惯，任何事情都会有一个过程，这个过程也是你成长的一部分，希望以后可以加油加油，做的更好，💪fighting！！！</p><h3 id="👉生活上">👉生活上</h3><p>仔细想想，最近都没怎么自己做过几顿饭，可惜了我姐给我买的新锅哈哈哈，偶尔自己做做饭也是挺舒坦的，但是会做的菜也没几道，看来下次回家得好好看看爸妈怎么做饭，偷学点厨艺👨‍🍳嘿嘿。</p><p>最近也是和以往一样，日常失眠，失眠似乎已经成了自己生活中的一部分，怎么甩都甩不掉，试过吃药，试过自我催眠，试过做多点事情让自己更累，但是依然是很难入睡，也是没辙了，那就顺其自然吧😑</p><p>感受上呢，烦心事也有，但是自己还能消化，相信好运会有的，面包也会有的，要微笑面对每一天，做人最要紧的就是开心啦！！！😄</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
